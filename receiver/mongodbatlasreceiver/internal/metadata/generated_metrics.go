// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/config"
	"go.opentelemetry.io/collector/model/pdata"
)

// Type is the component type name.
const Type config.Type = "mongoatlasreceiver"

// MetricIntf is an interface to generically interact with generated metric.
type MetricIntf interface {
	Name() string
	New() pdata.Metric
	Init(metric pdata.Metric)
}

// Intentionally not exposing this so that it is opaque and can change freely.
type metricImpl struct {
	name     string
	initFunc func(pdata.Metric)
}

// Name returns the metric name.
func (m *metricImpl) Name() string {
	return m.name
}

// New creates a metric object preinitialized.
func (m *metricImpl) New() pdata.Metric {
	metric := pdata.NewMetric()
	m.Init(metric)
	return metric
}

// Init initializes the provided metric object.
func (m *metricImpl) Init(metric pdata.Metric) {
	m.initFunc(metric)
}

type metricStruct struct {
	MongodbAtlasAsserts                          MetricIntf
	MongodbAtlasBackgroundFlush                  MetricIntf
	MongodbAtlasCacheIo                          MetricIntf
	MongodbAtlasCacheSize                        MetricIntf
	MongodbAtlasConnections                      MetricIntf
	MongodbAtlasCPU                              MetricIntf
	MongodbAtlasCPUChildren                      MetricIntf
	MongodbAtlasCPUChildrenNormalized            MetricIntf
	MongodbAtlasCPUNormalized                    MetricIntf
	MongodbAtlasCursors                          MetricIntf
	MongodbAtlasDbStorage                        MetricIntf
	MongodbAtlasDocumentRate                     MetricIntf
	MongodbAtlasFtsCPU                           MetricIntf
	MongodbAtlasFtsCPUNormalized                 MetricIntf
	MongodbAtlasFtsDisk                          MetricIntf
	MongodbAtlasFtsMemory                        MetricIntf
	MongodbAtlasGlobalLock                       MetricIntf
	MongodbAtlasIndexBtreeMissRatio              MetricIntf
	MongodbAtlasIndexCounters                    MetricIntf
	MongodbAtlasJournalingCommits                MetricIntf
	MongodbAtlasJournalingDataFiles              MetricIntf
	MongodbAtlasJournalingWritten                MetricIntf
	MongodbAtlasMemory                           MetricIntf
	MongodbAtlasNetworkIo                        MetricIntf
	MongodbAtlasNetworkRequests                  MetricIntf
	MongodbAtlasOpExecutionTime                  MetricIntf
	MongodbAtlasOperationsRate                   MetricIntf
	MongodbAtlasOplogRate                        MetricIntf
	MongodbAtlasOplogTime                        MetricIntf
	MongodbAtlasOps                              MetricIntf
	MongodbAtlasPageFaults                       MetricIntf
	MongodbAtlasQueryExecutorScanned             MetricIntf
	MongodbAtlasQueryTargetingScannedPerReturned MetricIntf
	MongodbAtlasRestarts                         MetricIntf
	MongodbAtlasSwap                             MetricIntf
	MongodbAtlasSwapIo                           MetricIntf
	MongodbAtlasSystemCPU                        MetricIntf
	MongodbAtlasSystemMemory                     MetricIntf
	MongodbAtlasSystemNetworkIo                  MetricIntf
	MongodbAtlasSystemNormalizedCPU              MetricIntf
	MongodbAtlasTickets                          MetricIntf
}

// Names returns a list of all the metric name strings.
func (m *metricStruct) Names() []string {
	return []string{
		"mongodb.atlas.asserts",
		"mongodb.atlas.background_flush",
		"mongodb.atlas.cache.io",
		"mongodb.atlas.cache.size",
		"mongodb.atlas.connections",
		"mongodb.atlas.cpu",
		"mongodb.atlas.cpu.children",
		"mongodb.atlas.cpu.children.normalized",
		"mongodb.atlas.cpu.normalized",
		"mongodb.atlas.cursors",
		"mongodb.atlas.db.storage",
		"mongodb.atlas.document.rate",
		"mongodb.atlas.fts.cpu",
		"mongodb.atlas.fts.cpu.normalized",
		"mongodb.atlas.fts.disk",
		"mongodb.atlas.fts.memory",
		"mongodb.atlas.global_lock",
		"mongodb.atlas.index.btree_miss_ratio",
		"mongodb.atlas.index.counters",
		"mongodb.atlas.journaling.commits",
		"mongodb.atlas.journaling.data_files",
		"mongodb.atlas.journaling.written",
		"mongodb.atlas.memory",
		"mongodb.atlas.network.io",
		"mongodb.atlas.network.requests",
		"mongodb.atlas.op_execution_time",
		"mongodb.atlas.operations.rate",
		"mongodb.atlas.oplog.rate",
		"mongodb.atlas.oplog.time",
		"mongodb.atlas.ops",
		"mongodb.atlas.page_faults",
		"mongodb.atlas.query_executor.scanned",
		"mongodb.atlas.query_targeting.scanned_per_returned",
		"mongodb.atlas.restarts",
		"mongodb.atlas.swap",
		"mongodb.atlas.swap.io",
		"mongodb.atlas.system.cpu",
		"mongodb.atlas.system.memory",
		"mongodb.atlas.system.network.io",
		"mongodb.atlas.system.normalized.cpu",
		"mongodb.atlas.tickets",
	}
}

var metricsByName = map[string]MetricIntf{
	"mongodb.atlas.asserts":                              Metrics.MongodbAtlasAsserts,
	"mongodb.atlas.background_flush":                     Metrics.MongodbAtlasBackgroundFlush,
	"mongodb.atlas.cache.io":                             Metrics.MongodbAtlasCacheIo,
	"mongodb.atlas.cache.size":                           Metrics.MongodbAtlasCacheSize,
	"mongodb.atlas.connections":                          Metrics.MongodbAtlasConnections,
	"mongodb.atlas.cpu":                                  Metrics.MongodbAtlasCPU,
	"mongodb.atlas.cpu.children":                         Metrics.MongodbAtlasCPUChildren,
	"mongodb.atlas.cpu.children.normalized":              Metrics.MongodbAtlasCPUChildrenNormalized,
	"mongodb.atlas.cpu.normalized":                       Metrics.MongodbAtlasCPUNormalized,
	"mongodb.atlas.cursors":                              Metrics.MongodbAtlasCursors,
	"mongodb.atlas.db.storage":                           Metrics.MongodbAtlasDbStorage,
	"mongodb.atlas.document.rate":                        Metrics.MongodbAtlasDocumentRate,
	"mongodb.atlas.fts.cpu":                              Metrics.MongodbAtlasFtsCPU,
	"mongodb.atlas.fts.cpu.normalized":                   Metrics.MongodbAtlasFtsCPUNormalized,
	"mongodb.atlas.fts.disk":                             Metrics.MongodbAtlasFtsDisk,
	"mongodb.atlas.fts.memory":                           Metrics.MongodbAtlasFtsMemory,
	"mongodb.atlas.global_lock":                          Metrics.MongodbAtlasGlobalLock,
	"mongodb.atlas.index.btree_miss_ratio":               Metrics.MongodbAtlasIndexBtreeMissRatio,
	"mongodb.atlas.index.counters":                       Metrics.MongodbAtlasIndexCounters,
	"mongodb.atlas.journaling.commits":                   Metrics.MongodbAtlasJournalingCommits,
	"mongodb.atlas.journaling.data_files":                Metrics.MongodbAtlasJournalingDataFiles,
	"mongodb.atlas.journaling.written":                   Metrics.MongodbAtlasJournalingWritten,
	"mongodb.atlas.memory":                               Metrics.MongodbAtlasMemory,
	"mongodb.atlas.network.io":                           Metrics.MongodbAtlasNetworkIo,
	"mongodb.atlas.network.requests":                     Metrics.MongodbAtlasNetworkRequests,
	"mongodb.atlas.op_execution_time":                    Metrics.MongodbAtlasOpExecutionTime,
	"mongodb.atlas.operations.rate":                      Metrics.MongodbAtlasOperationsRate,
	"mongodb.atlas.oplog.rate":                           Metrics.MongodbAtlasOplogRate,
	"mongodb.atlas.oplog.time":                           Metrics.MongodbAtlasOplogTime,
	"mongodb.atlas.ops":                                  Metrics.MongodbAtlasOps,
	"mongodb.atlas.page_faults":                          Metrics.MongodbAtlasPageFaults,
	"mongodb.atlas.query_executor.scanned":               Metrics.MongodbAtlasQueryExecutorScanned,
	"mongodb.atlas.query_targeting.scanned_per_returned": Metrics.MongodbAtlasQueryTargetingScannedPerReturned,
	"mongodb.atlas.restarts":                             Metrics.MongodbAtlasRestarts,
	"mongodb.atlas.swap":                                 Metrics.MongodbAtlasSwap,
	"mongodb.atlas.swap.io":                              Metrics.MongodbAtlasSwapIo,
	"mongodb.atlas.system.cpu":                           Metrics.MongodbAtlasSystemCPU,
	"mongodb.atlas.system.memory":                        Metrics.MongodbAtlasSystemMemory,
	"mongodb.atlas.system.network.io":                    Metrics.MongodbAtlasSystemNetworkIo,
	"mongodb.atlas.system.normalized.cpu":                Metrics.MongodbAtlasSystemNormalizedCPU,
	"mongodb.atlas.tickets":                              Metrics.MongodbAtlasTickets,
}

func (m *metricStruct) ByName(n string) MetricIntf {
	return metricsByName[n]
}

// Metrics contains a set of methods for each metric that help with
// manipulating those metrics.
var Metrics = &metricStruct{
	&metricImpl{
		"mongodb.atlas.asserts",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.asserts")
			metric.SetDescription("Number of assertions")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.background_flush",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.background_flush")
			metric.SetDescription("Amount of data flushed in the background")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.cache.io",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.cache.io")
			metric.SetDescription("Cache throughput")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.cache.size",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.cache.size")
			metric.SetDescription("Cache sizes")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.connections",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.connections")
			metric.SetDescription("Number of current connections")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.cpu",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.cpu")
			metric.SetDescription("CPU Usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.cpu.children",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.cpu.children")
			metric.SetDescription("CPU Usage for child processes")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.cpu.children.normalized",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.cpu.children.normalized")
			metric.SetDescription("CPU Usage for child processes, normalized to pct")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.cpu.normalized",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.cpu.normalized")
			metric.SetDescription("CPU Usage, normalized to pct")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.cursors",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.cursors")
			metric.SetDescription("Number of cursors")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.db.storage",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.db.storage")
			metric.SetDescription("FIXME")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.document.rate",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.document.rate")
			metric.SetDescription("Document access rates")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.fts.cpu",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.fts.cpu")
			metric.SetDescription("Full text search CPU")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.fts.cpu.normalized",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.fts.cpu.normalized")
			metric.SetDescription("Full text search CPU, normalized to pct")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.fts.disk",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.fts.disk")
			metric.SetDescription("Full text search disk usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.fts.memory",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.fts.memory")
			metric.SetDescription("Full text search memory usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.global_lock",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.global_lock")
			metric.SetDescription("Number and status of locks")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.index.btree_miss_ratio",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.index.btree_miss_ratio")
			metric.SetDescription("Index miss ratio")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.index.counters",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.index.counters")
			metric.SetDescription("Indexes")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.journaling.commits",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.journaling.commits")
			metric.SetDescription("Journaling commits")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.journaling.data_files",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.journaling.data_files")
			metric.SetDescription("Data file sizes")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.journaling.written",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.journaling.written")
			metric.SetDescription("Journals written")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.memory",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.memory")
			metric.SetDescription("Memory Usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.network.io",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.network.io")
			metric.SetDescription("Network IO")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.network.requests",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.network.requests")
			metric.SetDescription("Network requests")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.op_execution_time",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.op_execution_time")
			metric.SetDescription("Execution time by operation")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.operations.rate",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.operations.rate")
			metric.SetDescription("Execution rate by operation")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.oplog.rate",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.oplog.rate")
			metric.SetDescription("Oplog rate")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.oplog.time",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.oplog.time")
			metric.SetDescription("Oplog time")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.ops",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.ops")
			metric.SetDescription("FIXME")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.page_faults",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.page_faults")
			metric.SetDescription("Page faults")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.query_executor.scanned",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.query_executor.scanned")
			metric.SetDescription("Scanned objects")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.query_targeting.scanned_per_returned",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.query_targeting.scanned_per_returned")
			metric.SetDescription("Scanned objects per returned")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.restarts",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.restarts")
			metric.SetDescription("Restarts in last hour")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.swap",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.swap")
			metric.SetDescription("Swap usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.swap.io",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.swap.io")
			metric.SetDescription("Swap IO")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.system.cpu",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.system.cpu")
			metric.SetDescription("System CPU Usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.system.memory",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.system.memory")
			metric.SetDescription("System Memory Usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.system.network.io",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.system.network.io")
			metric.SetDescription("System Network IO")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.system.normalized.cpu",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.system.normalized.cpu")
			metric.SetDescription("System CPU Normalized to pct")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"mongodb.atlas.tickets",
		func(metric pdata.Metric) {
			metric.SetName("mongodb.atlas.tickets")
			metric.SetDescription("Tickets")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
}

// M contains a set of methods for each metric that help with
// manipulating those metrics. M is an alias for Metrics
var M = Metrics

// Labels contains the possible metric labels that can be used.
var Labels = struct {
}{}

// L contains the possible metric labels that can be used. L is an alias for
// Labels.
var L = Labels

// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/config"
	"go.opentelemetry.io/collector/model/pdata"
)

// Type is the component type name.
const Type config.Type = "mongoatlasreceiver"

// MetricIntf is an interface to generically interact with generated metric.
type MetricIntf interface {
	Name() string
	New() pdata.Metric
	Init(metric pdata.Metric)
}

// Intentionally not exposing this so that it is opaque and can change freely.
type metricImpl struct {
	name     string
	initFunc func(pdata.Metric)
}

// Name returns the metric name.
func (m *metricImpl) Name() string {
	return m.name
}

// New creates a metric object preinitialized.
func (m *metricImpl) New() pdata.Metric {
	metric := pdata.NewMetric()
	m.Init(metric)
	return metric
}

// Init initializes the provided metric object.
func (m *metricImpl) Init(metric pdata.Metric) {
	m.initFunc(metric)
}

type metricStruct struct {
	DbCounts                                  MetricIntf
	DbSize                                    MetricIntf
	DiskPartitionIops                         MetricIntf
	DiskPartitionLatency                      MetricIntf
	DiskPartitionSpace                        MetricIntf
	DiskPartitionUtilization                  MetricIntf
	ProcessAsserts                            MetricIntf
	ProcessBackgroundFlush                    MetricIntf
	ProcessCacheIo                            MetricIntf
	ProcessCacheSize                          MetricIntf
	ProcessConnections                        MetricIntf
	ProcessCPUChildrenNormalizedUsage         MetricIntf
	ProcessCPUChildrenUsage                   MetricIntf
	ProcessCPUNormalizedUsage                 MetricIntf
	ProcessCPUUsage                           MetricIntf
	ProcessCursors                            MetricIntf
	ProcessDbDocumentRate                     MetricIntf
	ProcessDbOperationsRate                   MetricIntf
	ProcessDbOperationsTime                   MetricIntf
	ProcessDbQueryExecutorScanned             MetricIntf
	ProcessDbQueryTargetingScannedPerReturned MetricIntf
	ProcessDbStorage                          MetricIntf
	ProcessFtsCPUNormalizedUsage              MetricIntf
	ProcessFtsCPUUsage                        MetricIntf
	ProcessFtsDiskUsage                       MetricIntf
	ProcessFtsMemoryUsage                     MetricIntf
	ProcessGlobalLock                         MetricIntf
	ProcessIndexBtreeMissRatio                MetricIntf
	ProcessIndexCounters                      MetricIntf
	ProcessJournalingCommits                  MetricIntf
	ProcessJournalingDataFiles                MetricIntf
	ProcessJournalingWritten                  MetricIntf
	ProcessMemoryUsage                        MetricIntf
	ProcessNetworkIo                          MetricIntf
	ProcessNetworkRequests                    MetricIntf
	ProcessOplogRate                          MetricIntf
	ProcessOplogTime                          MetricIntf
	ProcessPageFaults                         MetricIntf
	ProcessRestarts                           MetricIntf
	ProcessTickets                            MetricIntf
	SystemCPUNormalizedUsage                  MetricIntf
	SystemCPUUsage                            MetricIntf
	SystemFtsCPUNormalizedUsage               MetricIntf
	SystemFtsCPUUsage                         MetricIntf
	SystemFtsDiskUtilization                  MetricIntf
	SystemFtsMemoryUsage                      MetricIntf
	SystemMemoryUsage                         MetricIntf
	SystemNetworkIo                           MetricIntf
	SystemPagingIo                            MetricIntf
	SystemPagingUsage                         MetricIntf
}

// Names returns a list of all the metric name strings.
func (m *metricStruct) Names() []string {
	return []string{
		"db.counts",
		"db.size",
		"disk.partition.iops",
		"disk.partition.latency",
		"disk.partition.space",
		"disk.partition.utilization",
		"process.asserts",
		"process.background_flush",
		"process.cache.io",
		"process.cache.size",
		"process.connections",
		"process.cpu.children.normalized.usage",
		"process.cpu.children.usage",
		"process.cpu.normalized.usage",
		"process.cpu.usage",
		"process.cursors",
		"process.db.document.rate",
		"process.db.operations.rate",
		"process.db.operations.time",
		"process.db.query_executor.scanned",
		"process.db.query_targeting.scanned_per_returned",
		"process.db.storage",
		"process.fts.cpu.normalized.usage",
		"process.fts.cpu.usage",
		"process.fts.disk.usage",
		"process.fts.memory.usage",
		"process.global_lock",
		"process.index.btree_miss_ratio",
		"process.index.counters",
		"process.journaling.commits",
		"process.journaling.data_files",
		"process.journaling.written",
		"process.memory.usage",
		"process.network.io",
		"process.network.requests",
		"process.oplog.rate",
		"process.oplog.time",
		"process.page_faults",
		"process.restarts",
		"process.tickets",
		"system.cpu.normalized.usage",
		"system.cpu.usage",
		"system.fts.cpu.normalized.usage",
		"system.fts.cpu.usage",
		"system.fts.disk.utilization",
		"system.fts.memory.usage",
		"system.memory.usage",
		"system.network.io",
		"system.paging.io",
		"system.paging.usage",
	}
}

var metricsByName = map[string]MetricIntf{
	"db.counts":                                       Metrics.DbCounts,
	"db.size":                                         Metrics.DbSize,
	"disk.partition.iops":                             Metrics.DiskPartitionIops,
	"disk.partition.latency":                          Metrics.DiskPartitionLatency,
	"disk.partition.space":                            Metrics.DiskPartitionSpace,
	"disk.partition.utilization":                      Metrics.DiskPartitionUtilization,
	"process.asserts":                                 Metrics.ProcessAsserts,
	"process.background_flush":                        Metrics.ProcessBackgroundFlush,
	"process.cache.io":                                Metrics.ProcessCacheIo,
	"process.cache.size":                              Metrics.ProcessCacheSize,
	"process.connections":                             Metrics.ProcessConnections,
	"process.cpu.children.normalized.usage":           Metrics.ProcessCPUChildrenNormalizedUsage,
	"process.cpu.children.usage":                      Metrics.ProcessCPUChildrenUsage,
	"process.cpu.normalized.usage":                    Metrics.ProcessCPUNormalizedUsage,
	"process.cpu.usage":                               Metrics.ProcessCPUUsage,
	"process.cursors":                                 Metrics.ProcessCursors,
	"process.db.document.rate":                        Metrics.ProcessDbDocumentRate,
	"process.db.operations.rate":                      Metrics.ProcessDbOperationsRate,
	"process.db.operations.time":                      Metrics.ProcessDbOperationsTime,
	"process.db.query_executor.scanned":               Metrics.ProcessDbQueryExecutorScanned,
	"process.db.query_targeting.scanned_per_returned": Metrics.ProcessDbQueryTargetingScannedPerReturned,
	"process.db.storage":                              Metrics.ProcessDbStorage,
	"process.fts.cpu.normalized.usage":                Metrics.ProcessFtsCPUNormalizedUsage,
	"process.fts.cpu.usage":                           Metrics.ProcessFtsCPUUsage,
	"process.fts.disk.usage":                          Metrics.ProcessFtsDiskUsage,
	"process.fts.memory.usage":                        Metrics.ProcessFtsMemoryUsage,
	"process.global_lock":                             Metrics.ProcessGlobalLock,
	"process.index.btree_miss_ratio":                  Metrics.ProcessIndexBtreeMissRatio,
	"process.index.counters":                          Metrics.ProcessIndexCounters,
	"process.journaling.commits":                      Metrics.ProcessJournalingCommits,
	"process.journaling.data_files":                   Metrics.ProcessJournalingDataFiles,
	"process.journaling.written":                      Metrics.ProcessJournalingWritten,
	"process.memory.usage":                            Metrics.ProcessMemoryUsage,
	"process.network.io":                              Metrics.ProcessNetworkIo,
	"process.network.requests":                        Metrics.ProcessNetworkRequests,
	"process.oplog.rate":                              Metrics.ProcessOplogRate,
	"process.oplog.time":                              Metrics.ProcessOplogTime,
	"process.page_faults":                             Metrics.ProcessPageFaults,
	"process.restarts":                                Metrics.ProcessRestarts,
	"process.tickets":                                 Metrics.ProcessTickets,
	"system.cpu.normalized.usage":                     Metrics.SystemCPUNormalizedUsage,
	"system.cpu.usage":                                Metrics.SystemCPUUsage,
	"system.fts.cpu.normalized.usage":                 Metrics.SystemFtsCPUNormalizedUsage,
	"system.fts.cpu.usage":                            Metrics.SystemFtsCPUUsage,
	"system.fts.disk.utilization":                     Metrics.SystemFtsDiskUtilization,
	"system.fts.memory.usage":                         Metrics.SystemFtsMemoryUsage,
	"system.memory.usage":                             Metrics.SystemMemoryUsage,
	"system.network.io":                               Metrics.SystemNetworkIo,
	"system.paging.io":                                Metrics.SystemPagingIo,
	"system.paging.usage":                             Metrics.SystemPagingUsage,
}

func (m *metricStruct) ByName(n string) MetricIntf {
	return metricsByName[n]
}

// Metrics contains a set of methods for each metric that help with
// manipulating those metrics.
var Metrics = &metricStruct{
	&metricImpl{
		"db.counts",
		func(metric pdata.Metric) {
			metric.SetName("db.counts")
			metric.SetDescription("Database feature size")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"db.size",
		func(metric pdata.Metric) {
			metric.SetName("db.size")
			metric.SetDescription("Database feature size")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"disk.partition.iops",
		func(metric pdata.Metric) {
			metric.SetName("disk.partition.iops")
			metric.SetDescription("Disk partition iops")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"disk.partition.latency",
		func(metric pdata.Metric) {
			metric.SetName("disk.partition.latency")
			metric.SetDescription("Disk partition latency")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"disk.partition.space",
		func(metric pdata.Metric) {
			metric.SetName("disk.partition.space")
			metric.SetDescription("Disk partition space")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"disk.partition.utilization",
		func(metric pdata.Metric) {
			metric.SetName("disk.partition.utilization")
			metric.SetDescription("Disk partition utilization")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.asserts",
		func(metric pdata.Metric) {
			metric.SetName("process.asserts")
			metric.SetDescription("Number of assertions")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.background_flush",
		func(metric pdata.Metric) {
			metric.SetName("process.background_flush")
			metric.SetDescription("Amount of data flushed in the background")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.cache.io",
		func(metric pdata.Metric) {
			metric.SetName("process.cache.io")
			metric.SetDescription("Cache throughput")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.cache.size",
		func(metric pdata.Metric) {
			metric.SetName("process.cache.size")
			metric.SetDescription("Cache sizes")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.connections",
		func(metric pdata.Metric) {
			metric.SetName("process.connections")
			metric.SetDescription("Number of current connections")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.cpu.children.normalized.usage",
		func(metric pdata.Metric) {
			metric.SetName("process.cpu.children.normalized.usage")
			metric.SetDescription("CPU Usage for child processes, normalized to pct")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.cpu.children.usage",
		func(metric pdata.Metric) {
			metric.SetName("process.cpu.children.usage")
			metric.SetDescription("CPU Usage for child processes")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.cpu.normalized.usage",
		func(metric pdata.Metric) {
			metric.SetName("process.cpu.normalized.usage")
			metric.SetDescription("CPU Usage, normalized to pct")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.cpu.usage",
		func(metric pdata.Metric) {
			metric.SetName("process.cpu.usage")
			metric.SetDescription("CPU Usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.cursors",
		func(metric pdata.Metric) {
			metric.SetName("process.cursors")
			metric.SetDescription("Number of cursors")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.db.document.rate",
		func(metric pdata.Metric) {
			metric.SetName("process.db.document.rate")
			metric.SetDescription("Document access rates")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.db.operations.rate",
		func(metric pdata.Metric) {
			metric.SetName("process.db.operations.rate")
			metric.SetDescription("FIXME")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.db.operations.time",
		func(metric pdata.Metric) {
			metric.SetName("process.db.operations.time")
			metric.SetDescription("FIXME")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.db.query_executor.scanned",
		func(metric pdata.Metric) {
			metric.SetName("process.db.query_executor.scanned")
			metric.SetDescription("Scanned objects")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.db.query_targeting.scanned_per_returned",
		func(metric pdata.Metric) {
			metric.SetName("process.db.query_targeting.scanned_per_returned")
			metric.SetDescription("Scanned objects per returned")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.db.storage",
		func(metric pdata.Metric) {
			metric.SetName("process.db.storage")
			metric.SetDescription("FIXME")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.fts.cpu.normalized.usage",
		func(metric pdata.Metric) {
			metric.SetName("process.fts.cpu.normalized.usage")
			metric.SetDescription("Full text search CPU, normalized to pct")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.fts.cpu.usage",
		func(metric pdata.Metric) {
			metric.SetName("process.fts.cpu.usage")
			metric.SetDescription("Full text search CPU")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.fts.disk.usage",
		func(metric pdata.Metric) {
			metric.SetName("process.fts.disk.usage")
			metric.SetDescription("Full text search disk usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.fts.memory.usage",
		func(metric pdata.Metric) {
			metric.SetName("process.fts.memory.usage")
			metric.SetDescription("Full text search memory usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.global_lock",
		func(metric pdata.Metric) {
			metric.SetName("process.global_lock")
			metric.SetDescription("Number and status of locks")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.index.btree_miss_ratio",
		func(metric pdata.Metric) {
			metric.SetName("process.index.btree_miss_ratio")
			metric.SetDescription("Index miss ratio")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.index.counters",
		func(metric pdata.Metric) {
			metric.SetName("process.index.counters")
			metric.SetDescription("Indexes")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.journaling.commits",
		func(metric pdata.Metric) {
			metric.SetName("process.journaling.commits")
			metric.SetDescription("Journaling commits")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.journaling.data_files",
		func(metric pdata.Metric) {
			metric.SetName("process.journaling.data_files")
			metric.SetDescription("Data file sizes")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.journaling.written",
		func(metric pdata.Metric) {
			metric.SetName("process.journaling.written")
			metric.SetDescription("Journals written")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.memory.usage",
		func(metric pdata.Metric) {
			metric.SetName("process.memory.usage")
			metric.SetDescription("Memory Usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.network.io",
		func(metric pdata.Metric) {
			metric.SetName("process.network.io")
			metric.SetDescription("Network IO")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.network.requests",
		func(metric pdata.Metric) {
			metric.SetName("process.network.requests")
			metric.SetDescription("Network requests")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.oplog.rate",
		func(metric pdata.Metric) {
			metric.SetName("process.oplog.rate")
			metric.SetDescription("Execution rate by operation")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.oplog.time",
		func(metric pdata.Metric) {
			metric.SetName("process.oplog.time")
			metric.SetDescription("Execution time by operation")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.page_faults",
		func(metric pdata.Metric) {
			metric.SetName("process.page_faults")
			metric.SetDescription("Page faults")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.restarts",
		func(metric pdata.Metric) {
			metric.SetName("process.restarts")
			metric.SetDescription("Restarts in last hour")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"process.tickets",
		func(metric pdata.Metric) {
			metric.SetName("process.tickets")
			metric.SetDescription("Tickets")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"system.cpu.normalized.usage",
		func(metric pdata.Metric) {
			metric.SetName("system.cpu.normalized.usage")
			metric.SetDescription("System CPU Normalized to pct")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"system.cpu.usage",
		func(metric pdata.Metric) {
			metric.SetName("system.cpu.usage")
			metric.SetDescription("System CPU Usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"system.fts.cpu.normalized.usage",
		func(metric pdata.Metric) {
			metric.SetName("system.fts.cpu.normalized.usage")
			metric.SetDescription("Full text search disk usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"system.fts.cpu.usage",
		func(metric pdata.Metric) {
			metric.SetName("system.fts.cpu.usage")
			metric.SetDescription("Full-text search")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"system.fts.disk.utilization",
		func(metric pdata.Metric) {
			metric.SetName("system.fts.disk.utilization")
			metric.SetDescription("Full text search disk usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"system.fts.memory.usage",
		func(metric pdata.Metric) {
			metric.SetName("system.fts.memory.usage")
			metric.SetDescription("Full-text search")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"system.memory.usage",
		func(metric pdata.Metric) {
			metric.SetName("system.memory.usage")
			metric.SetDescription("System Memory Usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"system.network.io",
		func(metric pdata.Metric) {
			metric.SetName("system.network.io")
			metric.SetDescription("System Network IO")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"system.paging.io",
		func(metric pdata.Metric) {
			metric.SetName("system.paging.io")
			metric.SetDescription("Swap IO")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"system.paging.usage",
		func(metric pdata.Metric) {
			metric.SetName("system.paging.usage")
			metric.SetDescription("Swap usage")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
}

// M contains a set of methods for each metric that help with
// manipulating those metrics. M is an alias for Metrics
var M = Metrics

// Labels contains the possible metric labels that can be used.
var Labels = struct {
}{}

// L contains the possible metric labels that can be used. L is an alias for
// Labels.
var L = Labels
